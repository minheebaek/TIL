//boj세수정렬
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int a = scan.nextInt();
        int b = scan.nextInt();
        int c = scan.nextInt();
        int arr[] = new int[]{a,b,c};


        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - 1 - i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;

                }
            }

        }
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");

        }

    }
}

//8-19
public class FinallyTest3 {
    public static void main(String[] args) {
    
    FinallyTest3.method1();
        System.out.println("method1()의 수행을 마치고 main메서드로 돌아왔습니다.");
    }
    static void method1(){
        try{
            System.out.println("method1()이 호출되었습니다.");
            return;
        }catch (Exception e){
            e.printStackTrace();
        }finally{
            System.out.println("method1()의 finally블럭이 실행되었습니다.");
        }
    }
}

//7-26
public class RepairableTest {
    public static void main(String[] args) {
        Tank tank = new Tank();
        Dorpship dorpship = new Dorpship();
        
        Marine marine = new Marine();
        SCV scv = new SCV();
        
        scv.repair(tank);
        scv.repair(dorpship);
      //  scv.repair(marine); 에러
    }
}
interface Repairable{}
class Unit{
    int hitPoint;
    final int MAX_HP;
    Unit(int hp){
        MAX_HP = hp;
    }
}
class GroundUnit extends Unit{
    GroundUnit(int hp){
        super(hp);
    }
}
class AirUnit extends Unit{
    AirUnit(int hp){
        super(hp);
    }
}
class Tank extends GroundUnit implements Repairable{
    Tank(){
        super(150);
        hitPoint =MAX_HP;
    }
    public String toString(){return "tank";}
}
class Dorpship extends AirUnit implements Repairable{
    Dorpship(){
        super(120);
        hitPoint=MAX_HP;
    }
    public String toString(){return "Dorship";}
}
class Marine extends GroundUnit {
    Marine(){
        super(40);
        hitPoint=MAX_HP;
    }
}
class SCV extends GroundUnit implements Repairable{
    SCV(){
        super(60);
        hitPoint=MAX_HP;
    }
    void repair(Repairable r){
        if(r instanceof Unit){
            Unit u = (Unit) r;
            while (u.hitPoint!=u.MAX_HP){
                u.hitPoint++;
            }
            System.out.println(u.toString()+"의 수리가 끝났습니다.");
        }
    }
}

//7-27
class A{
    public void methodA(B b){
        b.methodB();
    }
}
class B{
    public void methodB(){
        System.out.println("methodB ()");
    }
}

class InterfaceTest{
    public static void main(String[] args) {
        A a = new A();
        a.methodA( new B());
    }
}

//7-28
class A{
    public void method1(I i){
        i.play();
    }
}
interface I{
    public abstract void play();
}
class B implements I{
    public void play(){
        System.out.println("play in B class");
    };
}

class C implements I{
    public void play(){
        System.out.println("play in C class");
    }
}
class InterfaceTest2{
    public static void main(String[] args) {
        A a = new A();   
        a.method1(new B());
        a.method1(new C());
    }
    
}
 
//8-20
public class TryWithResourceEx {
    public static void main(String[] args) {
        try(CloseableResource cr =new CloseableResource()){
            cr.exceptionWork(false);
        }catch ( WorkException e){
            e.printStackTrace();
        }catch (CloseEception e){
            e.printStackTrace();
        }
        System.out.println();
        try(CloseableResource cr = new CloseableResource()){
            cr.exceptionWork(true);
        }catch (WorkException e){
            e.printStackTrace();
        }catch (CloseEception e){
            e.printStackTrace();
        }
    }
}
class CloseableResource implements AutoCloseable{
    public void exceptionWork(boolean exception) throws WorkException{
        System.out.println("exceptionWork("+exception+")가 호출됨");

        if(exception)
            throw new WorkException("WorkException 발생!");

    }
    //AutoCloseable의 close를 오버라이드한거네
    public void close() throws CloseEception{
        System.out.println("close()가 호출됨");
        throw new CloseEception("CloseEception 발생!!!");
    }

//    @Override
//    public void close() throws Exception {
//        
//    }
}

class WorkException extends Exception{
    WorkException(String msg){super(msg);}
}
class CloseEception extends Exception{
    CloseEception(String msg){super(msg);}
}

//8-22
public class ExceptionEx17 {
    public static void main(String[] args) {
        try{
            method1();
        }catch (Exception e){
            System.out.println("main메서드에서 예외가 처리되었습니다.");
        }
    }
    static void method1() throws Exception {
        try{
            throw new Exception();
        }catch (Exception e){
            System.out.println("method1에서 예외가 처리되었습니다.");
        throw e;
        }
    }
}

//7-31
public class InnerEx1 {
    class InstanceInner{
        int iv =100;
        //static int cv  = 100;
        final static int CONST = 100; //상수는 당연 가능
    }
    static class StaticInner{
        int iv =200;
        static int cv = 200; //static 클래스만 static 멤버르를 정의할 수 있다.
    }
    void MyMethod(){
        class LocalInner{
            int iv =100;
            // static int iv =100;
            final static int CONST = 200;
        }
    }

    public static void main(String[] args) {
        System.out.println(InstanceInner.CONST);
        System.out.println(StaticInner.cv);
    }
}
