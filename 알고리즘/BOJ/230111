//BOJ 15873
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    String str = scan.next();

    if(str.length()==2){
        int a = str.charAt(0)-'0';
        int b = str.charAt(1)-'0';
        System.out.println(a+b);
    }else if(str.length()==3){
        if(str.charAt(1)=='0'){
            int a = 10;
            int b = str.charAt(2)-'0';
            System.out.println(a+b);
        }
        else{
            int a=str.charAt(0)-'0';
            int b=10;
            System.out.println(a+b);
        }
    }else{
        int a = 10;
        int b = 10;
        System.out.println(a+b);
    }

    }
}

//7-23
import java.util.Vector;

class Product{
        int price;
        int bonusPoint;
        Product(int price){
        this.price=price;
        this.bonusPoint=(int)(price/10.0);
        }
        Product(){
            price=0;
            bonusPoint=0;
        };

}
class Tv extends Product{
    Tv(){
        super(100);
    }
   public String toString() {return "Tv";}
}

class Computer extends Product{
    Computer(){
        super(200);
    }
    public String toString(){return "Computer";}
}

class Audio extends Product{
    Audio(){
        super(30);
    }
    public String toString() {return "Audio";}
}
class Buyer{
    int money=1000;
    int bonusPoint=0;
    Vector item= new Vector(); //구입한 제품을 저장하는데 사용될 Vector객체

    void buy(Product p){
        if(money<p.price){
            System.out.println("잔액이 부족하여 구매할 수 없습니다.");
            return;
        }
        money-=p.price;
        bonusPoint+=p.bonusPoint;
        item.add(p);
        System.out.println(p+"을/를 구입하셨습니다.");
    }
    void refund(Product p) {
        if (item.remove(p)) {//제품을 Vector에서 제거한 경우
            money += p.price;
            bonusPoint -= p.bonusPoint;
            System.out.println(p + "을/를 반품하셨습니다.");
        } else {
            System.out.println("구입하신 제품 중 해당 제품이 없습니다.");
        }
    }
    void summary(){
        int sum=0;
        String itemList="";

        if(item.isEmpty()) {//Vector가 비어있는지 확인
            System.out.println("구입하신 제품이 없습니다.");
            return;
        }

        for (int i = 0; i <item.size(); i++) {
             Product p=(Product)item.get(i);
             sum+=p.price;
             itemList += (i==0) ? ""+p :","+p;

        }
        System.out.println("구입하신 물품의 총금액은 "+sum+"만원입니다.");
        System.out.println("구입하신 제품은 "+itemList+"입니다.");
    }


}
public class PolyArgumentTest {
    public static void main(String[] args) {
    Buyer b = new Buyer();
    Tv t=new Tv();
    Computer c = new Computer();
    Audio a = new Audio();

    b.buy(t);
    b.buy(c);
    b.buy(a);
    b.summary();
    System.out.println();
    b.refund(c);
    b.summary();

    }
}

//7-24
public class FighterTest {
    public static void main(String[] args) {
        Fighter f = new Fighter();

        if(f instanceof Unit){
            System.out.println("f는 Unit클래스의 자손입니다.");
        }
        if(f instanceof Fightable){
            System.out.println("f는 Fightable인터페이스를 구현했습니다.");
        }
        if(f instanceof Movable){
            System.out.println("f는 Movable 인터페이스를 구현했습니다.");
        }
        if(f instanceof Attackable){
            System.out.println("f는 Attackable인터페이스를 구현했습니다.");
        }
        if(f instanceof Object){
            System.out.println("f는 Object클래스의 자손입니다.");
        }
    }
}
class Fighter extends Unit implements Fightable{
    public void move(int x, int y){ /*내용생략*/}
    public void attack(Unit u){/*내용생략*/}
}
class Unit{
    int currentHP;//유닛의 체력
    int x;
    int y;
}
interface Fightable extends Movable, Attackable {}
interface Movable{void move(int x, int y);}
interface Attackable{void attack(Unit u);}


//7-36
class  InnerEx6{
    Object iv = new Object(){void method(){}};
    static Object cv = new Object() { void methodD(){}};
    
    void myMethod(){
        Object lv  = new Object(){ void method(){}};
    }
}

//7-37
import java.awt.*;
import java.awt.event.*;
class  InnerEx1{
    public static void main(String[] args) {
        Button b = new Button("Start");
        b.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                System.out.println("ActionEvent occurred!!!");
            }
        }//익명클래스 끝
        );
    }
}

//7-31
class  InnerEx1{
    class InstanceInner{//인스턴스클래스
        int iv=100;
        //static int cv =100;
        final static int CONST=100;
    }
    static class StaticInner{//스태틱클래스
        int iv=200;
        static int cv=200; //staic클래스만 static멤버를 선언할 수 있다.
    }
    void myMethod(){
        class LocalInner{//지역 클래스
            int iv =300;
            //static int cv =300; //static변수 선언 못함
            final static int CONST =300;
        }
    }
    public static void main(String[] args) {
        System.out.println(InstanceInner.CONST);
        System.out.println(StaticInner.cv);
    }
}
//7-25
interface Parseable{
    //구문분석작업을 수행한다.
    public abstract void parse(String fileName);
}

class ParseManager{
    public static Parseable getParser(String type){
        if(type.equals("XML")){
            return new XMLParser();
        }else{
            Parseable p = new HTMLParser();
            return p;
        }
    }
}
class XMLParser implements Parseable{
    public void parse(String fileName){
        System.out.println(fileName+"-XML parsing completed.");
    }
}
class HTMLParser implements Parseable{
    public void parse(String fileName){
        System.out.println(fileName+"-HTML parsing completed.");
    }
}
public class ParserTest {
    public static void main(String[] args) {
        Parseable parser = ParseManager.getParser("XML");
        parser.parse("document.xml");
        parser=ParseManager.getParser("HTML");
        parser.parse("document2.html");
    }
}
//7-26
public class RepairableTest {
    public static void main(String[] args) {

    }
}

interface Repairable{}

class Unit{
    int hitPoint;
    final int MAX_HP;
    Unit(int hp){
        MAX_HP =hp;
    }
}

class GroundUnit extends Unit{
    GroundUnit(int hp){
        super(hp);
    }
}

class AirUnit extends Unit{
    AirUnit(int hp){
        super(hp);
    }
}
class Tank extends GroundUnit implements Repairable{
    Tank(int hp){
        super(hp);
        hitPoint=MAX_HP;
    }
    public String toString(){
        return "Tank";
    }
}
class Dropship extends GroundUnit implements Repairable{
    Dropship(){
        super(125);
        hitPoint = MAX_HP;
    }
    public String toString(){return "Dropship";}
}
class Marine extends GroundUnit{
    Marine(){
        super(40);
        hitPoint = MAX_HP;
    }
}
class SCV extends GroundUnit implements Repairable{
 SCV(){
     super(60);
     hitPoint = MAX_HP;
 }
 void repair(Repairable r){
     if(r instanceof Unit){
         Unit u=(Unit)r;
         while(u.hitPoint!=u.MAX_HP){
             u.hitPoint++;
         }
         System.out.println(u.toString()+"의 수리가 끝났습니다.");
     }
 }
}
