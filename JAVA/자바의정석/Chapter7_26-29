//7-26
class RepairableTest{
    public static void main(String[] args) {

    }
}
interface Repairable{}

class Unit{
    int hitPoint;
    final int MAX_HP;
    Unit(int hp){
        MAX_HP=hp;
    }
}
class GroundUnit extends Unit{
    GroundUnit(int hp){
        super(hp);
    }
}
class AirUnit extends Unit{
    AirUnit(int hp){
        super(hp);
    }
}
class Tank extends GroundUnit implements Repairable{
    Tank(){
        super(150);
        hitPoint= MAX_HP;
    }
    public String toString(){
        return "Tank";
    }
}
class DropShip extends AirUnit implements Repairable{
    DropShip(){
        super(125);
        hitPoint=MAX_HP:
    }
    public String toString(){
        return "DropShip";
    }
}
class Marine extends GroundUnit{
    Marine(){
        super(40);
        hitPoint = MAX_HP;
    }
}
class SCV extends GroundUnit implements Repairable{
    SCV(){
        super(60);
        hitPoint=MAX_HP;
    }
    void repair(Repairable r){
        if(r instanceof Unit){
            Unit u = (Unit)r;
            while(u.hitPoint!=u.MAX_HP){
                u.hitPoint++;
            }
        }
    }
}

//7-27
class A{
    public void methodA(B b){
        b.methodB();
    }
}
class B{
    public void methodB(){
        System.out.println("methodV()");
    }
}

class InterfaceTest{
    public static void main(String[] args) {
        A a = new A();
        a.methodA(new B());
    }
}

//7-28
class A{
    void autoPlay(I i){
        i.play();
    }
}
interface I{
    public void play();
}
class B implements I{
    public void play(){
        System.out.println("play in B class");
    }
}

class C implements I{
    public void play(){
        System.out.println("play in C class");
    }
}

class InterfaceTest2{
    public static void main(String[] args) {
        A a = new A();
        a.autoPlay(new B());
        a.autoPlay(new C());
    }
}

//7-29
class InterfaceTest3{
    public static void main(String[] args) {
        
    }
}

class A{
    void methodA(){
        I i = InstanceManager.getInstance();
        i.methodB();
        System.out.println(i.toString());
    }
}

interface I{
    public abstract void methodB();
}

class B implements I{
    public void methodB(){
        System.out.println("methodB in B class");
    }
}

class InstanceManager{
    public static I getInstance(){
        return new B();
    }
}