import java.util.Vector;

//7-17
class InstanceofTest{
    public static void main(String[] args) {
        FireEngine fe = new FireEngine();

        if(fe instanceof  FireEngine){
            System.out.println("this is a fireengine instance");
        }
        if(fe instanceof Car){
            System.out.println("this is a car instance");
        }
        if(fe instanceof Object){
            System.out.println("this is a object instanceo");
        }
        System.out.println(fe.getClass().getClass()};
    }

}
class Car{}
class FireEngine extends Car{}

//6-18
class BindingTest{
    public static void main(String[] args) {
        Parent p = new Child();
        Child c = new Child();

        System.out.println(p.x);
        p.method();
        System.out.println(c.x);
        c.method();
    }


}
class Parent{
    int x=100;
    void method(){
        System.out.println("Parent Method");

    }
}
class Child extends Parent{
    int x=200;
    void method(){
        System.out.println("Child Method");
    }
}

//7-19
class BindingTest2{
    public static void main(String[] args) {
        Parent p = new Child();
        Child c = new Child();

        System.out.println(p.x);
        p.method();
        System.out.println(c.x);
        c.method();
    }
}
class Parent{
    int x =100;
    void method(){
        System.out.println("Parent Method");
    }
}
class Child extends Parent{}

//7-20
class BindingTest3{
    public static void main(String[] args) {

    }
}

class Parent{
    int x =100;
    void method(){
        System.out.println("Parent Method");
    }
}
class Child extends Parent{
    int x =200;

    void method(){
        System.out.println(x);
        System.out.println(super.x);
        System.out.println(this.x);
    }
}

//7-21
class Product{
    int price;
    int bonusPoint;
    Product(int price){
        this.price=price;
        bonusPoint = (int)(price/10.0);
    }
}
class Tv extends Product{
    Tv() {
        super(100);
    }
        public String toString(){return "TV";}
    }
class Computer extends Product{
    Computer(){super(200);}

    public String toString(){return "Computer";}
}
class Buyer{
    int money = 1000;
    int bonusPoint =0;

    void buy(Product p){
        if(money<p.price){
            System.out.println("잔액이 부족하여 물건을 살 수 없다");
            return;
        }
        money-=p.price;
        bonusPoint+=p.bonusPoint;
        System.out.println(p+"을/를 구입하셨습니다.");
    }
}

class PolyArgumentTest{
    public static void main(String[] args) {
        Buyer b = new Buyer();

        b.buy(new Tv());
        b.buy(new Computer());

        System.out.println(b.money);
        System.out.println(b.bonusPoint);
    }
}

//7-22
class Product{
    int price;
    int bonusPoint;
    Product(int price){
        this.price=price;
        bonusPoint = (int)(price/10.0);
    }
    Product(){}
}
class Tv extends Product{
    Tv() {
        super(100);
    }
    public String toString(){return "TV";}
}
class Computer extends Product{
    Computer(){super(200);}

    public String toString(){return "Computer";}
}
class Audio extends Product{
    Audio(){super(50);}

    public String toString(){return "Audio";}
}

class Buyer{
    int money = 1000;
    int bonusPoint =0;
    Product[] item = new Product[10];
    int i=0;

    void buy(Product p){
        if(money<p.price){
            System.out.println("잔액이 부족하여 물건을 살 수 없다");
            return;
        }
        money-=p.price;
        bonusPoint+=p.bonusPoint;
        item[i++]=p;
        System.out.println(p+"을/를 구입하셨습니다.");
    }

    void summary(){
        int sum=0;
        String itemList="";

        for (int j = 0; j < item.length; j++) {
            if(item[i]==null) break;
            sum+=item[i].price;
            itemList += item[i]+", ";
        }
        System.out.println(sum);
        System.out.println(itemList);
    }
}

class PolyArgumentTest2{
    public static void main(String[] args) {
        Buyer b = new Buyer();

        b.buy(new Tv());
        b.buy(new Computer());
        b.buy(new Audio());
        b.summary();
    }
}

//7-23
import java.tuil.*;

class Product{
    int price;
    int bonusPoint;
    Product(int price){
        this.price=price;
        bonusPoint = (int)(price/10.0);
    }
    Product(){
        price=0;
        bonusPoint=0;
    }
}
class Tv extends Product{
    Tv() {
        super(100);
    }
    public String toString(){return "TV";}
}
class Computer extends Product{
    Computer(){super(200);}

    public String toString(){return "Computer";}
}
class Audio extends Product{
    Audio(){super(50);}

    public String toString(){return "Audio";}
}

class Buyer{
    int money = 1000;
    int bonusPoint =0;
    Vector item = Vector();

    void buy(Product p){
        if(money<p.price){
            System.out.println("잔액이 부족하여 물건을 살 수 없다");
            return;
        }
        money-=p.price;
        bonusPoint+=p.bonusPoint;
        item.add(p);
        System.out.println(p+"을/를 구입하셨습니다.");
    }
    void refund(Product p){
        if(item.remove(p)){
            money+=p.price;
            bonusPoint-=p.bonusPoint;
            System.out.println(p+"을/를 반품하셨습니다");
        }else{
            System.out.println("구입하신 제품 중 해당 제품이 없습니다.");
        }
    }

    void summary(){
        int sum=0;
        String itemList="";

        for (int i = 0; i < item.size(); i++) {
            Product p = (Product) item.get(i);
            sum+=p.price;
            itemList+=(i==0) ? ""+ p : ", "+ p;
        }
        System.out.println(sum);
        System.out.println(itemList);
    }
}

class PolyArgumentTest3{
    public static void main(String[] args) {
        Buyer b = new Buyer();
        Tv tv = new Tv();
        Computer com = new Computer();
        Audio audio = new Audio();

        b.buy(tv);
        b.buy(com);
        b.buy(audio);
        b.summary();
        System.out.println();
        b.refund(com);
        b.summary();
    }
}

//7-24
class FighterTest{
    public static void main(String[] args) {
        Fighter f = new Fighter();

        if(f instanceof Unit)
            System.out.println("f는 Unit믈래스의 자손");
        if(f instanceof Fightable)
            System.out.println("f는 Fightable인터페이스 구현");
        if(f instanceof Movable)
            System.out.println("f는 Movable 인터페이스 구현");
        if(f instanceof Attackable)
            System.out.println("f는 Attackable 인터페이스 구현");
        if(f instanceof Object)
            System.out.println("f는 Object클래스의 자손");

    }
}

class Fighter extends Unit implements Fightable{
    public void move(int x, int y){ /*내용 생략 */}
    public void attack(Unit u) { /*내용 생략 */}
}
class Unit{
    int currentHP;
    int x;
    int y;
}
interface Fightable extends Movable, Attackable{}
interface Movable{void move(int x, int y);}
interface Attackable{void  attack(Unit u);}
