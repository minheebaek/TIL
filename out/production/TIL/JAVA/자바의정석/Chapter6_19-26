//6-19
class MyMath2{
    long a,b;
    
    //인스턴스변수 a,b이용, 매개변수 필요없다
    long add() {return a+b;}
    long substract() {return a-b;}
    long multiply() {return a*b;}
    double divide() {return a/b;}
    
    //인스턴스 변수와 관계없이 매개변수만으로 작업이 가능
    static long add(long a, long b) {return a+b;}
    static long substract(long a, long b) {return a-b;}
    static long multiply(long a, long b) {return a*b;}
    static double divide(double a, double b) {return a/b;}
}

class MyMathTest2{
    public static void main(String[] args) {
        //클래스 메서드 호출, 인스턴스 생성없이 호출가능
        System.out.println(MyMathTest2.add(200L,100L));
        System.out.println(MyMathTest2.substract(200L,100L));
        System.out.println(MyMathTest2.multiply(200L,100L));
        System.out.println(MyMathTest2.divide(200.0,100.0));
        
        MyMath2 mm = new MyMath2();
        mm.a=200L;
        mm.b=100L;
        //인스턴스메서드는 객체 생성 후에만 호출 가능
        System.out.println(mm.add());
        System.out.println(mm.substract());
        System.out.println(mm.multiply());
        System.out.println(mm.divide());
    }
}

//6-20
class MemberCall{
    int iv=10;
    static int cv=20;
    
    int iv2=cv;
    //static int cv2=iv;
    static int cv2=new MemberCall().iv;
    
    static void staticMethod1(){
        System.out.println(cv);
     //   System.out.println(iv); //클래스메서드에서 인스턴스변수를 사용불가
        MemberCall c =new MemberCall();
        System.out.println(c.iv); //객체를 생성한 후에야 인스턴스변수의 참조가능
    }
    
    void instanceMethod1(){
        System.out.println(cv);
        System.out.println(iv);
    }
    static void staticMethod2(){
        staticMethod1();
       // instanceMethod1();
        MemberCall c = new MemberCall();
        c.instanceMethod1();
    }
    void instanceMethod2(){
        staticMethod1();
        instanceMethod1();
    }
}

//6-21
class OverloadingTest{
    public static void main(String[] args) {
        MyMath3 mm = new MyMath3();
        System.out.println(mm.add(3,3));
        System.out.println(mm.add(3L,3));
        System.out.println(mm.add(3,3L));
        System.out.println(mm.add(3L,3L));
        
        int[] a={100,200,300};
        System.out.println(mm.add(a));
    }
}

class MyMath3{
    int add(int a, int b){
        System.out.println("int add(int a, int b)-");
        return a+b;
    }
    long add(int a, long b){
        System.out.println("long add(int a, long b)-");
        return a+b;
    }
    long add(long a, int b){
        System.out.println("long add(long a, int b)-");
        return a+b;
    }
    long add(long a, long b){
        System.out.println("long add(long a, long b)-");
        return a+b;
    }
    long add(int[] a){
        System.out.println("");
        int result=0;
        for (int i = 0; i < a.length; i++) {
            result += a[i];
            
        }
        return result;
    }
}

//6-22
class VarArgsEx{
    public static void main(String[] args) {
        String[] strArr = {"100","200","300"};

        System.out.println(concatenate("","100","200","300"));
        System.out.println(concatenate("-", strArr));
        System.out.println(concatenate(",",new String[] {"1","2","3"}));
        System.out.println("["+concatenate(",", new String[0])+"]");
        System.out.println("["+concatenate(",")+"]");
    }
    
    static String concatenate(String delim, String... args){
        String result ="";
        
        for(String str : args){
            result +=str + delim;
        }
        return result;
    }
    /*
    static String concatenate(String... args){
        return concatenate("", args);
     */
}

//6-23
class Data1{
    int value;
}
class Data2{
    int value;
    Data2(int x){
        value=x;
    }
}

class ConstructorTest{
    public static void main(String[] args) {
        Data1 d1 = new Data1();
        Data2 d2 = new Data2();
    }
}

//6-24

class Car{
    String color;
    String gearType;
    int door;
    
    Car(){}
    Car(String c, String g, int d){
        color=c;
        gearType=g;
        door=d;
    }
}
class CarTest{
    public static void main(String[] args) {
        Car c1 = new Car();
        c1.color="white";
        c1.gearType="auto";
        c1.door=4;
        
        Car c2 = new Car("white", "auto", 4);
        
        // 검증 과정인 println 생략
        }
    }


//6-25
class Car{
    String color;
    String gearType;
    int door;

    Car(){
        this("white", "auto", 4);
    }
    Car(String color){
        this(color,"auto",4);
    }
    Car(String color, String gearType, int door){
        this.color=color;
        this.gearType=gearType;
        this.door=door;
    }
}
class CarTest2{
    public static void main(String[] args) {
        Car c1 = new Car();
        Car c2 = new Car("blue");

        // 검증 과정인 println 생략
    }
}

//6-26
class Car{
    String color;
    String gearType;
    int door;

    Car(){
        this("white", "auto", 4);
    }
    Car(Car c){
       color = c.color;
       gearType = c.gearType;
       door = c.door;
    }
    Car(String color, String gearType, int door){
        this.color=color;
        this.gearType=gearType;
        this.door=door;
    }
}

class CarTest3{
    public static void main(String[] args) {
        Car c1 = new Car();
        Car c2 = new Car(c1); //c1의 복사본 c2 만듦
        
        c1.door=100;

        // 검증 과정인 println 생략
    }
}