package JAVA.자바의정석;

class ExceptionEx1 {
    public static void main(String[] args) {
        try{
            try{ } catch (Exception e){}
        } catch (Exception e){
            try{} catch (Exception e){} //에러 변수 e 중복 선언
        }

        try{

        } catch(Exception e){

        }
    }
}

class ExceptionEx2{
    public static void main(String[] args) {
        int number = 100;
        int result =0;

        for (int i = 0; i < 10; i++) {
            result = number / (int)(Math.random()*10);
            System.out.println(result);

        }
    }
}
class ExceptionEx3{
    public static void main(String[] args) {
        int number = 100;
        int result =0;

        for (int i = 0; i < 10; i++) {
            try{
                result = number / (int)(Math.random()*10);
                System.out.println(result);
            } catch (ArithmeticException e){
                System.out.println("0");
            }
        }
    }
}

class ExceptionEx4{
    public static void main(String[] args) {
        System.out.println(1);
        System.out.println(2);
        try{
            System.out.println(3);
            System.out.println(4);
        }catch (Exception e){
            System.out.println(5);
        }
        System.out.println(6);
    }
}

class ExceptionEx5{
    public static void main(String[] args) {
        System.out.println(1);
        System.out.println(2);
        try{
            System.out.println(3);
            System.out.println(0/0);
            System.out.println(4); //실행되지 않는다
        }catch (ArithmeticException ae){
            System.out.println(5);
        }
        System.out.println(6);
    }
}

class ExceptionEx6{
    public static void main(String[] args) {
        System.out.println(1);
        System.out.println(2);
        try{
            System.out.println(3);
            System.out.println(0/0);
            System.out.println(4); //실행되지 않는다
        }catch (Exception e){
            System.out.println(5);
        }
        System.out.println(6);
    }
}

class ExceptionEx7{
    public static void main(String[] args) {
        System.out.println(1);
        System.out.println(2);
        try{
            System.out.println(3);
            System.out.println(0/0);
            System.out.println(4); //실행되지 않는다
        }catch (ArithmeticException ae){
            if(ae instanceof ArithmeticException)
                System.out.println("true");
            System.out.println("ArithmeticException");
        }catch (Exception e){//ArithmeticException을 제외한 모든 예외가 처리된다
            System.out.println("Exception");
        }
        System.out.println(6);
    }
}

class ExceptionEx8 {
    public static void main(String[] args) {
        System.out.println(1);
        System.out.println(2);
        try{
            System.out.println(3);
            System.out.println(0/0);
            System.out.println(4); //실행되지 않는다
        }catch (ArithmeticException ae){
            ae.printStackTrace(); //ae를 통해 생성된 ArithmeticException 인스턴스에 접근할 수 있다
            System.out.println("예외메시지 : "+ae.getMessage());
        }
        System.out.println(6);
    }
}

class ExceptionEx9 {
    public static void main(String[] args) {
        try{
            Exception e =new Exception("고의로 발생시켰음"); //Exception 인스턴스에 메시지로 저장됨
            throw e;
        } catch (Exception e){
            System.out.println("에러메시지 : "+e.getMessage());
            e.printStackTrace();
        }
        System.out.println("프로그램이 정상 종료되었음");

    }
}

class ExceptionEx10 {
    public static void main(String[] args) {
        throw new Exception(); //Exception을 고의로 발생시킨다
    }
}//Exception클래스들이 발생할 가능성이 있는 문장들에 대해 예외처리해주지 않으면 컴파일조차 안됨

class ExceptionEx11 {
    public static void main(String[] args) {
        throw new RuntimeException();
    }
}

class ExceptionEx12{
    public static void main(String[] args) throws Exception {
        method1();
    }
    static void method1() throws Exception{
        method2();
    }
    static void method2() throws Exception{
        throw new Exception();
    }
}

class ExceptionEx13{
    public static void main(String[] args) {
        method1();
    }
    static void method1(){
        try{
            throw new Exception();
        }catch (Exception e){
            System.out.println("method1에서 에외가 처리되었습니다.");
            e.printStackTrace();
        }
    }
}

class ExceptionEx14{
    public static void main(String[] args) {
        try{
            method1();
        }catch (Exception e){
            System.out.println("main메서드에서 예외가 처리되었습니다");
            e.printStackTrace();
        }

        static void method() throws Exception{
            throw new Exception();
        }
    }
}